<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Sarabun:wght@300;400;500;600;700&display=swap');

        body { font-family: 'Sarabun', sans-serif; }
        .fade-in { animation: fadeIn 0.3s ease-in; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .image-preview { transition: all 0.3s ease; }
        .image-preview:hover { transform: scale(1.05); }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <!-- Header -->
    <div class="bg-white shadow-lg border-b-4 border-blue-500">
        <div class="container mx-auto px-4 py-6">
            <h1 class="text-3xl font-bold text-gray-800 text-center">üè† ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô</h1>
            <div class="flex justify-center mt-4 space-x-4">
                <button onclick="showTab('tasks')" id="tasksTab" class="px-6 py-2 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 transition-colors">üìã ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</button>
                <button onclick="showTab('summary')" id="summaryTab" class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300 transition-colors">üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô</button>
            </div>
        </div>
    </div>

    <!-- Progress Bar -->
    <div class="container mx-auto px-4 py-4">
        <div class="bg-white rounded-lg shadow-md p-4">
            <div class="flex justify-between items-center mb-2">
                <span class="text-sm font-medium text-gray-700">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</span>
                <span id="progressText" class="text-sm font-bold text-blue-600">0%</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-3">
                <div id="progressBar" class="bg-gradient-to-r from-blue-500 to-green-500 h-3 rounded-full transition-all duration-500" style="width: 0%"></div>
            </div>
        </div>
    </div>

    <!-- Tasks Tab -->
    <div id="tasksContent" class="container mx-auto px-4 pb-8">
        <!-- Filters -->
        <div class="bg-white rounded-lg shadow-md p-4 mb-6">
            <h3 class="text-lg font-semibold mb-4 text-gray-800">üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á</h3>
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <select id="floorFilter" class="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πâ‡∏ô</option>
                    <option value="3">‡∏ä‡∏±‡πâ‡∏ô 3</option>
                    <option value="4">‡∏ä‡∏±‡πâ‡∏ô 4</option>
                    <option value="5">‡∏ä‡∏±‡πâ‡∏ô 5</option>
                    <option value="6">‡∏ä‡∏±‡πâ‡∏ô 6</option>
                </select>
                <select id="roomFilter" class="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á</option>
                </select>
                <select id="statusFilter" class="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
                    <option value="completed">‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢</option>
                    <option value="pending">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à</option>
                </select>
                <button onclick="resetAllTasks()" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors font-medium">üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏∏‡∏Å‡∏á‡∏≤‡∏ô</button>
            </div>
        </div>

        <!-- Tasks Grid -->
        <div id="tasksGrid" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6"></div>
    </div>

    <!-- Summary Tab -->
    <div id="summaryContent" class="container mx-auto px-4 pb-8 hidden">
        <div class="bg-white rounded-lg shadow-md p-6">
            <h3 class="text-2xl font-bold mb-6 text-gray-800">üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
            <div id="summaryStats" class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6"></div>
            <div id="summaryTable" class="overflow-x-auto"></div>
        </div>
    </div>

    <!-- Image Modal -->
    <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg max-w-4xl max-h-full overflow-auto">
            <div class="p-4 border-b flex justify-between items-center">
                <h3 class="text-lg font-semibold">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏á‡∏≤‡∏ô</h3>
                <button onclick="closeImageModal()" class="text-gray-500 hover:text-gray-700 text-2xl">&times;</button>
            </div>
            <div id="imageModalContent" class="p-4"></div>
        </div>
    </div>

    <script>
        const floors = {3: Array.from({length: 10}, (_, i) => 301+i),4: Array.from({length:10},(_,i)=>401+i),5:Array.from({length:8},(_,i)=>501+i),6:Array.from({length:8},(_,i)=>601+i)};
        const taskTypes = ['‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏á‡∏´‡πâ‡∏≠‡∏á','‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å','‡∏ã‡∏±‡∏Å‡∏û‡∏£‡∏°','‡∏Ç‡∏±‡∏î‡πÄ‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô','‡∏Ç‡∏±‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥','‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏°‡∏î','‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô corridor'];
        let tasks = [], currentTab = 'tasks';

        function initializeTasks() {
            tasks = [];
            Object.keys(floors).forEach(floor=>{
                floors[floor].forEach(room=>{
                    taskTypes.forEach(taskType=>{
                        tasks.push({id:`${floor}-${room}-${taskType}`,floor:floor,room:room,taskType:taskType,status:'pending',assignee:'',images:[],completedAt:null,completedBy:''});
                    });
                });
            });
            loadFromStorage();
        }

        function saveToStorage(){localStorage.setItem('housekeepingTasks',JSON.stringify(tasks)); localStorage.setItem('lastResetDate',new Date().toDateString());}
        function loadFromStorage(){
            const saved = localStorage.getItem('housekeepingTasks');
            const lastReset = localStorage.getItem('lastResetDate');
            const today = new Date();
            const lastResetDate = lastReset? new Date(lastReset): null;
            if(!lastResetDate || (today.getDate()===1 && today.toDateString()!==lastReset)){
                tasks.forEach(task=>{task.status='pending'; task.completedAt=null; task.completedBy=''; task.assignee=''; task.images=[];});
                saveToStorage(); return;
            }
            if(saved){const savedTasks=JSON.parse(saved); tasks.forEach(task=>{const t=savedTasks.find(x=>x.id===task.id); if(t) Object.assign(task,t);});}
        }

        function renderTasks(){
            const grid = document.getElementById('tasksGrid');
            const floorFilter = document.getElementById('floorFilter').value;
            const roomFilter = document.getElementById('roomFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;

            let filteredTasks = tasks;
            if(floorFilter) filteredTasks=filteredTasks.filter(t=>t.floor==floorFilter);
            if(roomFilter) filteredTasks=filteredTasks.filter(t=>t.room==roomFilter);
            if(statusFilter) filteredTasks=filteredTasks.filter(t=>t.status===statusFilter);

            const groupedTasks={};
            filteredTasks.forEach(t=>{
                const key=`${t.floor}-${t.room}`;
                if(!groupedTasks[key]) groupedTasks[key]=[];
                groupedTasks[key].push(t);
            });

            grid.innerHTML='';
            Object.keys(groupedTasks).forEach(roomKey=>{
                const [floor,room]=roomKey.split('-');
                const roomTasks=groupedTasks[roomKey];
                const completedCount=roomTasks.filter(t=>t.status==='completed').length;
                const totalCount=roomTasks.length;
                const progressPercent=(completedCount/totalCount)*100;

                const roomCard=document.createElement('div');
                roomCard.className='bg-white rounded-lg shadow-md overflow-hidden fade-in';
                roomCard.innerHTML=`
                    <div class="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-4">
                        <h3 class="text-xl font-bold">üè† ‡∏´‡πâ‡∏≠‡∏á ${room} (‡∏ä‡∏±‡πâ‡∏ô ${floor})</h3>
                        <div class="mt-2">
                            <div class="flex justify-between text-sm mb-1">
                                <span>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</span>
                                <span>${completedCount}/${totalCount} (${Math.round(progressPercent)}%)</span>
                            </div>
                            <div class="w-full bg-blue-300 rounded-full h-2">
                                <div class="bg-white h-2 rounded-full transition-all duration-500" style="width: ${progressPercent}%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="p-4">
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="border-b">
                                        <th class="text-left py-2">‡∏á‡∏≤‡∏ô</th>
                                        <th class="text-left py-2">‡∏ú‡∏π‡πâ‡∏ó‡∏≥</th>
                                        <th class="text-left py-2">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</th>
                                        <th class="text-left py-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                                        <th class="text-center py-2">‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${roomTasks.map(task=>`
                                        <tr class="border-b hover:bg-gray-50">
                                            <td class="py-3 font-medium">${task.taskType}</td>
                                            <td class="py-3">
                                                <input type="text" value="${task.assignee}" onchange="updateAssignee('${task.id}',this.value)" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" class="w-full px-2 py-1 border rounded text-xs focus:ring-1 focus:ring-blue-500">
                                            </td>
                                            <td class="py-3">
                                                <div class="flex items-center space-x-2">
                                                    <input type="file" id="images-${task.id}" multiple accept="image/*" onchange="handleImageUpload('${task.id}',this.files)" class="hidden">
                                                    <button onclick="document.getElementById('images-${task.id}').click()" class="bg-blue-500 text-white px-2 py-1 rounded text-xs hover:bg-blue-600">üì∑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ</button>
                                                    ${task.images.length>0?`<button onclick="viewImages('${task.id}')" class="bg-green-500 text-white px-2 py-1 rounded text-xs hover:bg-green-600">üëÅÔ∏è ‡∏î‡∏π‡∏£‡∏π‡∏õ (${task.images.length})</button>`:''}
                                                </div>
                                            </td>
                                            <td class="py-3">
                                                <span class="px-2 py-1 rounded-full text-xs font-medium ${task.status==='completed'?'bg-green-100 text-green-800':'bg-yellow-100 text-yellow-800'}">${task.status==='completed'?'‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢':'‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à'}</span>
                                                ${task.completedAt?`<div class="text-xs text-gray-500 mt-1">${new Date(task.completedAt).toLocaleString('th-TH')}</div>`:''}
                                                ${task.completedBy?`<div class="text-xs text-gray-500">‡πÇ‡∏î‡∏¢: ${task.completedBy}</div>`:''}
                                            </td>
                                            <td class="py-3 text-center">
                                                <button onclick="toggleTaskStatus('${task.id}')" class="px-3 py-1 rounded-lg text-xs font-medium transition-colors ${task.status==='completed'?'bg-gray-200 text-gray-700 hover:bg-gray-300':'bg-green-500 text-white hover:bg-green-600'}">${task.status==='completed'?'‚Ü©Ô∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å':'‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à'}</button>
                                            </td>
                                        </tr>`).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                `;
                grid.appendChild(roomCard);
            });
            updateProgress();
        }

        function updateAssignee(taskId, assignee){ const t=tasks.find(x=>x.id===taskId); if(t){t.assignee=assignee; saveToStorage();}}
        
        function handleImageUpload(taskId,files){
            const task=tasks.find(t=>t.id===taskId);
            if(task && files.length>0){
                Array.from(files).forEach(file=>{
                    if(file.type.startsWith('image/') && task.images.length<12){
                        const reader=new FileReader();
                        reader.onload=e=>{
                            task.images.push({name:file.name,data:e.target.result,uploadedAt:new Date().toISOString()});
                            saveToStorage(); renderTasks();
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }
        }

        function viewImages(taskId){
            const task=tasks.find(t=>t.id===taskId);
            if(task && task.images.length>0){
                const modal=document.getElementById('imageModal');
                const content=document.getElementById('imageModalContent');
                content.innerHTML=`<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">${task.images.map(img=>`
                    <div class="border rounded-lg overflow-hidden">
                        <img src="${img.data}" alt="${img.name}" class="w-full h-48 object-cover image-preview">
                        <div class="p-2 bg-gray-50">
                            <div class="text-xs text-gray-600">${img.name}</div>
                            <div class="text-xs text-gray-500">${new Date(img.uploadedAt).toLocaleString('th-TH')}</div>
                        </div>
                    </div>`).join('')}</div>`;
                modal.classList.remove('hidden');
            }
        }

        function closeImageModal(){document.getElementById('imageModal').classList.add('hidden');}
        function toggleTaskStatus(taskId){const t=tasks.find(x=>x.id===taskId); if(t){if(t.status==='pending'){if(!t.assignee.trim()){alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à');return;} t.status='completed'; t.completedAt=new Date().toISOString(); t.completedBy=t.assignee;}else{t.status='pending'; t.completedAt=null; t.completedBy='';} saveToStorage(); renderTasks(); if(currentTab==='summary') renderSummary();}}
        function resetAllTasks(){if(confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î? ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ')){tasks.forEach(t=>{t.status='pending'; t.completedAt=null; t.completedBy=''; t.assignee=''; t.images=[];}); saveToStorage(); renderTasks(); if(currentTab==='summary') renderSummary();}}
        function updateProgress(){const total=tasks.length; const done=tasks.filter(t=>t.status==='completed').length; const percent=(done/total)*100; document.getElementById('progressBar').style.width=percent+'%'; document.getElementById('progressText').textContent=Math.round(percent)+'%';}

        function updateRoomFilter(){
            const floor=document.getElementById('floorFilter').value;
            const roomFilter=document.getElementById('roomFilter');
            roomFilter.innerHTML='<option value="">‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á</option>';
            if(floor){floors[floor].forEach(r=>{const o=document.createElement('option'); o.value=r; o.textContent=`‡∏´‡πâ‡∏≠‡∏á ${r}`; roomFilter.appendChild(o);});}
            else{Object.keys(floors).forEach(floor=>{floors[floor].forEach(r=>{const o=document.createElement('option'); o.value=r; o.textContent=`‡∏´‡πâ‡∏≠‡∏á ${r} (‡∏ä‡∏±‡πâ‡∏ô ${floor})`; roomFilter.appendChild(o);});});}
        }

        function showTab(tab){
            currentTab=tab;
            document.getElementById('tasksTab').className=tab==='tasks'?'px-6 py-2 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 transition-colors':'px-6 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300 transition-colors';
            document.getElementById('summaryTab').className=tab==='summary'?'px-6 py-2 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 transition-colors':'px-6 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300 transition-colors';
            document.getElementById('tasksContent').classList.toggle('hidden',tab!=='tasks');
            document.getElementById('summaryContent').classList.toggle('hidden',tab!=='summary');
            tab==='tasks'?renderTasks():renderSummary();
        }

        document.getElementById('floorFilter').addEventListener('change',()=>{updateRoomFilter(); renderTasks();});
        document.getElementBy
Element('roomFilter').addEventListener('change', renderTasks);
        document.getElementById('statusFilter').addEventListener('change', renderTasks);

        // --- Summary Tab ---
        function renderSummary(){
            const summaryStats = document.getElementById('summaryStats');
            const summaryTable = document.getElementById('summaryTable');

            const totalTasks = tasks.length;
            const completedTasks = tasks.filter(t=>t.status==='completed').length;
            const pendingTasks = totalTasks - completedTasks;

            const tasksPerFloor = {};
            Object.keys(floors).forEach(floor=>{
                const floorTasks = tasks.filter(t=>t.floor==floor);
                const done = floorTasks.filter(t=>t.status==='completed').length;
                tasksPerFloor[floor] = {total: floorTasks.length, completed: done};
            });

            summaryStats.innerHTML=`
                <div class="bg-green-100 p-4 rounded-lg text-center">
                    <div class="text-2xl font-bold">${completedTasks}</div>
                    <div class="text-gray-600 text-sm">‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à</div>
                </div>
                <div class="bg-yellow-100 p-4 rounded-lg text-center">
                    <div class="text-2xl font-bold">${pendingTasks}</div>
                    <div class="text-gray-600 text-sm">‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à</div>
                </div>
                ${Object.keys(tasksPerFloor).map(f=>`
                    <div class="bg-blue-100 p-4 rounded-lg text-center">
                        <div class="text-lg font-semibold">‡∏ä‡∏±‡πâ‡∏ô ${f}</div>
                        <div>${tasksPerFloor[f].completed}/${tasksPerFloor[f].total} ‚úÖ</div>
                    </div>`).join('')}
            `;

            summaryTable.innerHTML=`
                <table class="w-full text-sm border-collapse border border-gray-300">
                    <thead>
                        <tr class="bg-gray-200">
                            <th class="border p-2 text-left">‡∏ä‡∏±‡πâ‡∏ô-‡∏´‡πâ‡∏≠‡∏á</th>
                            <th class="border p-2 text-left">‡∏á‡∏≤‡∏ô</th>
                            <th class="border p-2 text-left">‡∏ú‡∏π‡πâ‡∏ó‡∏≥</th>
                            <th class="border p-2 text-left">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                            <th class="border p-2 text-left">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${tasks.map(t=>`
                            <tr class="hover:bg-gray-50">
                                <td class="border p-2">${t.floor}-${t.room}</td>
                                <td class="border p-2">${t.taskType}</td>
                                <td class="border p-2">${t.assignee}</td>
                                <td class="border p-2">${t.status==='completed'?'‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢':'‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à'}</td>
                                <td class="border p-2">${t.completedAt?new Date(t.completedAt).toLocaleString('th-TH'):'-'}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
        }

        // --- Initialize ---
        initializeTasks();
        updateRoomFilter();
        renderTasks();
    </script>
</body>
</html>
